name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.get_version.outputs.VERSION }}';
            const releaseBody = `## Claudia ${version}

            ### 🚀 What's New
            * Cross-platform desktop application for Claude Code
            * Advanced sandboxing with OS-level security
            * Custom AI agents with secure execution
            * Usage analytics and cost tracking
            * MCP server management
            * Timeline & checkpoints for session versioning

            ### 📦 Downloads
            Choose the appropriate installer for your platform:

            * **Windows x64**: Download the \`.msi\` installer
            * **macOS Universal**: Download the \`.dmg\` file (supports both Intel and Apple Silicon Macs)
            * **Linux x64**: Download the \`.AppImage\` file

            ### 🔧 Installation Instructions

            #### Windows
            1. Download the \`.msi\` file
            2. Run the installer and follow the setup wizard
            3. Launch Claudia from the Start Menu

            #### macOS
            1. Download the \`.dmg\` file (works on both Intel and Apple Silicon Macs)
            2. Open the DMG and drag Claudia to Applications
            3. Launch from Applications (you may need to allow it in Security & Privacy settings)

            #### Linux
            1. Download the \`.AppImage\` file
            2. Make it executable: \`chmod +x claudia-*.AppImage\`
            3. Run the AppImage directly

            ### 📋 System Requirements
            * **Claude Code CLI**: Must be installed and available in PATH
            * **RAM**: Minimum 4GB (8GB recommended for better performance)
            * **Storage**: At least 1GB free disk space
            * **OS**: Windows 10+, macOS 11+, or Linux (Ubuntu 20.04+)

            ### 🆘 Getting Help
            * 📖 [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
            * 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
            * 💬 [Discussions](https://github.com/${{ github.repository }}/discussions)

            ---
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.1...${version}`;
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              name: `Claudia ${version}`,
              body: releaseBody,
              draft: true,
              prerelease: version.includes('beta') || version.includes('alpha') || version.includes('rc')
            });
            
            core.setOutput('upload_url', release.data.upload_url);
            return release.data.id;

  build-and-upload:
    name: Build and Upload (${{ matrix.platform.name }})
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux x86_64
            os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            artifact-pattern: "*.AppImage"
            artifact-name: "claudia-linux-x86_64"
          - name: Windows x86_64
            os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            artifact-pattern: "*.msi"
            artifact-name: "claudia-windows-x86_64"
          - name: macOS Universal
            os: macos-latest
            rust-target: universal-apple-darwin
            artifact-pattern: "*.dmg"
            artifact-name: "claudia-macos-universal"

    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install system dependencies for Linux
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libglib2.0-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            libxdo-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      # Setup Rust with caching
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust-target == 'universal-apple-darwin' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform.rust-target }}

      # Cache Rust dependencies
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          key: ${{ matrix.platform.os }}-${{ matrix.platform.rust-target }}-rust-${{ hashFiles('**/Cargo.lock') }}
          
      # Setup Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Cache Bun dependencies
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun
            node_modules
          key: ${{ matrix.platform.os }}-bun-${{ hashFiles('bun.lockb', 'package.json') }}
          restore-keys: |
            ${{ matrix.platform.os }}-bun-
      
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: bun install --frozen-lockfile

      # Build frontend
      - name: Build frontend
        run: bun run build

      - name: Setup macOS signing identity
        if: startsWith(matrix.platform.rust-target, 'x86_64-apple-darwin') || startsWith(matrix.platform.rust-target, 'aarch64-apple-darwin') || startsWith(matrix.platform.rust-target, 'universal-apple-darwin')
        run: |
          # Only setup signing if certificate is provided
          if [ -n "$APPLE_CERTIFICATE" ]; then
            echo "Setting up macOS code signing..."
            
            # Decode certificate from base64 and save to file
            echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
            
            # Create keychain
            security create-keychain -p "" build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain

            # Import certificate
            security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign > /dev/null 2>&1
            security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain > /dev/null 2>&1
            security list-keychains -d user -s build.keychain > /dev/null 2>&1

            # Cleanup certificate file
            rm certificate.p12
            
            echo "macOS code signing setup completed"
          else
            echo "No Apple certificate provided, skipping code signing setup"
          fi
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      # Build Tauri application with signing
      - name: Build Tauri application
        shell: bash
        run: |
          if [[ "${{ matrix.platform.rust-target }}" == *"apple-darwin"* ]]; then
            # For macOS builds, filter out verbose security output
            bun run tauri build --target ${{ matrix.platform.rust-target }} 2>&1 | grep -v -E "(0x[0-9A-Fa-f]{8}|<blob>|<uint32>|attributes:|keychain:|version:|class:|found cert.*with organization|identity imported)"
          else
            bun run tauri build --target ${{ matrix.platform.rust-target }}
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Tauri updater signing
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # macOS signing enabled
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # Notarize macOS app
      - name: Notarize macOS app
        if: startsWith(matrix.platform.rust-target, 'x86_64-apple-darwin') || startsWith(matrix.platform.rust-target, 'aarch64-apple-darwin') || startsWith(matrix.platform.rust-target, 'universal-apple-darwin')
        run: |
          # Only notarize if Apple credentials are provided
          if [ -n "$APPLE_ID" ] && [ -n "$APPLE_PASSWORD" ] && [ -n "$APPLE_TEAM_ID" ]; then
            echo "Starting macOS app notarization..."
            
            # Find the dmg file
            DMG_PATH=$(find src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/dmg -name "*.dmg" | head -1)
            
            if [ -f "$DMG_PATH" ]; then
              echo "Found DMG: $DMG_PATH"
              
              # Submit for notarization
              echo "Submitting for notarization..."
              xcrun notarytool submit "$DMG_PATH" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" \
                --wait
              
              # Staple the notarization ticket
              echo "Stapling notarization ticket..."
              xcrun stapler staple "$DMG_PATH"
              
              # Verify notarization
              echo "Verifying notarization..."
              xcrun stapler validate "$DMG_PATH"
              
              # Mount DMG and verify the app inside
              echo "Mounting DMG to verify app..."
              hdiutil attach "$DMG_PATH" -quiet
              APP_PATH=$(find /Volumes -name "*.app" -maxdepth 2 2>/dev/null | head -1)
              if [ -n "$APP_PATH" ]; then
                echo "Verifying app: $APP_PATH"
                spctl -a -v "$APP_PATH"
                hdiutil detach "$(dirname "$APP_PATH")" -quiet
              else
                echo "Warning: Could not find .app in mounted DMG"
                hdiutil detach /Volumes/Claudia* -quiet 2>/dev/null || true
              fi
              
              echo "Notarization completed successfully!"
            else
              echo "Warning: DMG file not found for notarization"
              ls -la src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/dmg/ || echo "DMG directory not found"
            fi
          else
            echo "Apple notarization credentials not provided, skipping notarization"
          fi
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # Find and upload artifacts
      - name: Find build artifacts
        id: find_artifacts
        shell: bash
        run: |
          # Find the bundle directory
          if [ "${{ matrix.platform.os }}" = "windows-latest" ]; then
            BUNDLE_DIR="src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/msi"
          elif [ "${{ matrix.platform.os }}" = "ubuntu-latest" ]; then
            BUNDLE_DIR="src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/appimage"
          else
            BUNDLE_DIR="src-tauri/target/${{ matrix.platform.rust-target }}/release/bundle/dmg"
          fi
          
          echo "BUNDLE_DIR=$BUNDLE_DIR" >> $GITHUB_OUTPUT
          
          # Find the artifact file
          ARTIFACT_FILE=$(find "$BUNDLE_DIR" -name "${{ matrix.platform.artifact-pattern }}" | head -1)
          echo "ARTIFACT_FILE=$ARTIFACT_FILE" >> $GITHUB_OUTPUT
          echo "ARTIFACT_NAME=$(basename "$ARTIFACT_FILE")" >> $GITHUB_OUTPUT
          
          # Verify file exists
          if [ ! -f "$ARTIFACT_FILE" ]; then
            echo "Error: Artifact file not found: $ARTIFACT_FILE"
            ls -la "$BUNDLE_DIR" || echo "Bundle directory not found"
            exit 1
          fi
          
          echo "Found artifact: $ARTIFACT_FILE"

      # Upload to GitHub Release
      - name: Upload Release Asset
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            const artifactPath = '${{ steps.find_artifacts.outputs.ARTIFACT_FILE }}';
            const artifactName = '${{ steps.find_artifacts.outputs.ARTIFACT_NAME }}';
            const uploadUrl = '${{ needs.create-release.outputs.release_upload_url }}';
            
            // Get file extension
            const ext = path.extname(artifactName);
            const baseName = '${{ matrix.platform.artifact-name }}';
            const finalName = `${baseName}${ext}`;
            
            console.log(`Uploading ${artifactPath} as ${finalName}`);
            
            // Read file content
            const data = fs.readFileSync(artifactPath);
            
            // Upload to release
            const response = await github.rest.repos.uploadReleaseAsset({
              url: uploadUrl,
              headers: {
                'content-type': 'application/octet-stream',
                'content-length': data.length,
              },
              name: finalName,
              data: data,
            });
            
            console.log(`✅ Successfully uploaded ${finalName}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload build artifacts for debugging
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform.name }}
          path: |
            ${{ steps.find_artifacts.outputs.BUNDLE_DIR }}
            src-tauri/target/${{ matrix.platform.rust-target }}/release/claudia*
          retention-days: 7

  finalize-release:
    name: Finalize Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: always()
    
    steps:
      - name: Check build results
        run: |
          if [[ "${{ needs.build-and-upload.result }}" == "failure" ]]; then
            echo "❌ One or more builds failed"
            exit 1
          elif [[ "${{ needs.build-and-upload.result }}" == "cancelled" ]]; then
            echo "⚠️ Builds were cancelled"
            exit 1
          else
            echo "✅ All builds completed successfully"
          fi

      - name: Publish Release
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const releaseId = ${{ needs.create-release.outputs.release_id }};
            
            // Publish the release (remove draft status)
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              draft: false
            });
            
            console.log(`✅ Release ${releaseId} published successfully!`);

      - name: Cleanup on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const releaseId = ${{ needs.create-release.outputs.release_id }};
            
            // Delete the failed release
            try {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId
              });
              console.log(`🗑️ Cleaned up failed release ${releaseId}`);
            } catch (error) {
              console.log(`⚠️ Could not cleanup release: ${error.message}`);
            } 